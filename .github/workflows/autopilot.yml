name: Legal Video Auto-Generation System

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: "30 9 * * *"  # Runs daily at 3:00 PM IST (9:30 UTC)

jobs:
  generate-legal-video:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install moviepy==1.0.3 gtts==2.5.1 requests==2.31.0 Pillow==10.0.0
          pip install imageio==2.34.0 imageio-ffmpeg==0.4.9

      - name: 🛠️ Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg imagemagick fonts-dejavu-core fonts-dejavu-extra
          # Configure ImageMagick policy for video processing
          sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml

      - name: 🔧 Verify Installation
        run: |
          python -c "import moviepy.editor as mp; print('✅ MoviePy installed successfully')"
          python -c "import gtts; print('✅ gTTS installed successfully')"
          python -c "import PIL; print('✅ Pillow installed successfully')"
          ffmpeg -version | head -n 1
          echo "✅ System setup complete"

      - name: 🔑 Test API Credentials
        run: |
          if [ -z "${{ secrets.HF_API_KEY }}" ]; then
            echo "❌ HF_API_KEY not found in secrets"
            exit 1
          fi
          
          echo "🧪 Testing Hugging Face API connection..."
          curl -s -H "Authorization: Bearer ${{ secrets.HF_API_KEY }}" \
               -H "Content-Type: application/json" \
               -d '{"inputs":"Test legal content generation","parameters":{"max_new_tokens":50}}' \
               https://api-inference.huggingface.co/models/google/flan-t5-small | head -n 5
          
          echo "✅ API credentials verified"
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}

      - name: 📋 Setup Topics Configuration
        run: |
          if [ ! -f "topics.json" ]; then
            echo "Creating default topics.json..."
            cat > topics.json << 'EOF'
          {
            "topics": [
              "How to report UPI / digital payment fraud",
              "How to file a cybercrime / online harassment complaint",
              "Consumer rights: refund / return / compensation", 
              "New criminal law micro-clarifications",
              "Data privacy: Ask companies to delete your data",
              "Tenant deposit / landlord disputes",
              "Women's safety quick kit",
              "AI tools for law students & professionals"
            ]
          }
          EOF
          fi
          echo "✅ Topics configuration ready"

      - name: 🎬 Generate Legal Video Content
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        run: |
          echo "🚀 Starting legal video generation system..."
          python autopilot.py

      - name: 📊 Generate Execution Report
        if: always()
        run: |
          echo "📈 EXECUTION SUMMARY" >> execution_report.txt
          echo "===================" >> execution_report.txt
          echo "Date: $(date)" >> execution_report.txt
          echo "Status: ${{ job.status }}" >> execution_report.txt
          echo "" >> execution_report.txt
          
          if [ -f "content_history.json" ]; then
            echo "📋 Content History:" >> execution_report.txt
            tail -n 20 content_history.json >> execution_report.txt
          fi
          
          if [ -f "delivery_log.json" ]; then
            echo "" >> execution_report.txt
            echo "📤 Delivery Log:" >> execution_report.txt  
            tail -n 10 delivery_log.json >> execution_report.txt
          fi
          
          echo "" >> execution_report.txt
          echo "📁 Generated Files:" >> execution_report.txt
          ls -la *.mp4 *.json *.txt 2>/dev/null || echo "No files generated"

      - name: 🗄️ Archive Generated Content
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: legal-video-content-${{ github.run_number }}
          path: |
            *.mp4
            *.json
            *.txt
            generated_script_*.txt
            youtube_package_*.json
          retention-days: 30

      - name: 📢 Notify on Failure
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                 -d chat_id="$TELEGRAM_CHAT_ID" \
                 -d text="🚨 Legal Video Generation Failed!%0A%0ADate: $(date)%0ARun: ${{ github.run_number }}%0A%0ACheck GitHub Actions for details." \
                 -d parse_mode="HTML"
          fi

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 Legal video generation completed successfully!"
          echo "📺 Video ready for YouTube upload"
          echo "📱 Check Telegram for delivery details"
